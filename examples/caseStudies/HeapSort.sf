
--type definition
data PList = Nil | Cons Int PList;

data Heap = Leaf | Node Int Int Heap Heap;


-----------equal & notEqual function for Heap-----------------
let rec equal (h1 : Heap) (h2 : Heap) : Bool =
  case h1 of
      Leaf             -> (case h2 of
                                Leaf         -> True
                              | Node _ _ _ _ -> False)
    | Node k1 v1 l1 r1 -> (case h2 of
                              Leaf             -> False
                            | Node k2 v2 l2 r2 -> if (k1 == k2 && v1 == v2 && equal l1 l2 && equal r1 r2) then True else False );

let notEqual (h1 : Heap) (h2 : Heap) : Bool =
    if equal h1 h2
    then False
    else True;
-------------------------------------------------------------


let rec size (l : PList) : Int =
       case l of
          Nil       -> 0
        | Cons _ xs -> 1 + size xs;

let rec rightHeight (h: Heap): Int =
      case h of
        Leaf         -> 0
      | Node _ _ _ r -> rightHeight r + 1;

let rank(h:Heap) : Int =
    case h of
     Leaf          -> 0
   | Node rk _ _ _ -> rk;

let max(x: Int) (y: Int) : Int = if x <= y then y else x;


let rootVal (h: Heap) : Int =
    if notEqual h Leaf
    then case h of Node _ v _ _ -> v
                  | Leaf   -> 0 -- error 0--[Int] "the Heap is just a leaf"
     else 0; --error [Int] "the Heap is just a leaf";


let rec hasLeftistProperty (h: Heap): Bool =
       case h of
         Leaf         -> True
       | Node _ v l r -> hasLeftistProperty l && hasLeftistProperty r &&
                         rightHeight l >= rightHeight r && rank h == rightHeight h &&
                         (equal l Leaf || v >= rootVal l) && (equal r Leaf || v >= rootVal r);

let rec heapSize (t: Heap) : Int =
     case t of
        Leaf         -> 0
      | Node _ v l r -> (heapSize l) + 1 + (heapSize r);

let prop_heapSize (t: Heap) : Bool = heapSize t >= 0 ;



let makeT (v: Int) (l: Heap) (r: Heap): Heap =
     if (rank l) >= (rank r) then (Node ((rank r) + 1) v l r)
                             else (Node ((rank l) + 1) v r l);

let rec merge (h1: Heap) (h2: Heap) : Heap =
    if hasLeftistProperty h1 && hasLeftistProperty h2
    then case h1 of
            Leaf            -> h2
          | Node _ v1 l1 r1 -> ( case h2 of
                                   Leaf -> h1
                                 | Node _ v2 l2 r2 -> if v1 > v2
                                                      then makeT v1 l1 (merge r1 h2)
                                                      else makeT v2 l2 (merge h1 r2) )
    else Leaf ;--error [Heap] "Both heaps are required to have leftist property" ;

let prop_merge (h1: Heap) (h2: Heap) : Bool =
     if  hasLeftistProperty h1 && hasLeftistProperty h2
     then let res = merge h1 h2;
          (case res of
              Leaf         -> h1 == Leaf && h2 == Leaf
            | Node _ v _ _ -> (notEqual h1 Leaf && rootVal h1 == v) ||
                              (notEqual h2 Leaf && rootVal h2 == v) )  &&
          hasLeftistProperty res &&
          heapSize h1 + heapSize h2 == heapSize res
        --  union (heapContent h1) (heapContent h2) == heapContent res
      else True ;


let insert (e: Int) (h: Heap) : Heap =
    if hasLeftistProperty h
    then merge (Node 1 e Leaf Leaf) h
    else Leaf ;--error [Heap] "the input heap does not have leftist property";

let prop_insert (e: Int) (h: Heap) : Bool =
    if hasLeftistProperty h
    then let res = insert e h;
         heapSize res == (heapSize h) + 1
     -- && heapContent res == union (singleton e) (heapContent h)
    else True;

let findMax (h: Heap) : Int =
    if hasLeftistProperty h -- && (notEqual h Leaf)
    then rootVal h
    else 0 ; --error [Int] "the Input does not have leftist property or empty" ;

let removeMax(h: Heap): Heap =
    case h of
           Node _ _ l r -> merge l r
         | Leaf         -> Leaf ;


----the property needed to be test
let prop_removeMax (h: Heap): Bool =
    if (equal h Leaf)  then True
    else if hasLeftistProperty h
         then let res = removeMax h;
              if (hasLeftistProperty res) &&
                 ((equal res Leaf) || ((findMax res) < (findMax h)))
              then True else False
         else True ;



let rec sortedDescending (l: PList) : Bool =
     case l of
        Nil                -> True
      | Cons x ll -> (case ll of
                          Nil       -> True
                        | Cons y ys -> (x >= y) && (sortedDescending (Cons y ys)));


let rec removeElements (h: Heap) : PList =
    if hasLeftistProperty h
    then case h of
           Leaf -> Nil
         | Node _ _ _ _    -> Cons (findMax h) (removeElements (removeMax h))
    else Nil ;--error [PList] "";


let prop_removeElements (h: Heap) : Bool =
   if hasLeftistProperty h
   then let res = removeElements h;
        sortedDescending res
     && heapSize h == size res
  -- && heapContent h == content res
   else True;

let rec buildHeap (l: PList) : Heap =
      case l of
         Nil       -> Leaf
       | Cons x xs -> insert x (buildHeap xs);

let prop_buildHeap (l: PList) : Bool =
                   let res = buildHeap l;
                   hasLeftistProperty res &&
                -- heapContent res == content l &&
                   heapSize res == size l;


let heapSort (l: PList) : PList = let h = buildHeap l; removeElements h;

let prop_heapSort (l: PList) : Bool =
                  let res = heapSort l;
                  sortedDescending res &&
                  size res == size l ;  -- &&
               --  content res == content l ;

--prop_heapSize
--prop_merge
--prop_insert
prop_removeMax
--prop_removeElements
--prop_buildHeap
--prop_heapSort
