

data PList = Nil | Cons Int PList;


let rec size (l : PList) : Int =
       case l of
          Nil       -> 0
        | Cons _ xs -> 1 + size xs;

let rec contains (l: PList) (e: Int) : Bool =
     case l of
         Nil -> False
       | Cons x xs -> x == e || contains xs e;

let rec firstZeroAtPos (l: PList) (pos: Int) : Bool =
        case l of
           Nil -> False
         | Cons x xs -> if pos == 0 then x == 0
                                    else x != 0 && firstZeroAtPos xs (pos - 1);

let rec firstZero (l: PList) : Int =
     case l of
         Nil -> 0
       | Cons x xs -> if x == 0 then 0 else (firstZero xs) + 1;

let prop_firstZero (l: PList) : Bool =
     let res = firstZero l;
     res >= 0 && (if contains l 0 then firstZeroAtPos l res
                                  else res == size l) ;

let prop_goal (l: PList) (i: Int) : Bool =
    if firstZero l == i
    then if contains l 0
         then firstZeroAtPos l i
         else i == size l
    else True ;

--this is the buggy property
let prop_goal_pseudo (l: PList) (i: Int) : Bool =
    if firstZero l == i
    then if contains l 10
      then firstZeroAtPos l i
      else i == size l
      else True;


--prop_goal
prop_goal_pseudo
