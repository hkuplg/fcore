
data KeyValuePairAbs = KeyValuePair Int Int;

data PList = Nil | Cons KeyValuePairAbs PList ;

data OptionInt = None | Some Int;

{-
------- define for set ---------------------------------------
type Set = java.util.HashSet;

let singleton(v: Int) : Set = let l = (new java.util.HashSet( ));
      if l.add(v)
      then l
      else l;

let union(s1: Set) (s2: Set) : Set =
    if s1.addAll(s2)
    then s1
    else s1;

--------------------------------------------------------------
-}


--let rec domain (l: PList) : Set =
--   case l of
--     Nil                        -> new java.util.HashSet( )
--   | Cons (KeyValuePair k _) xs -> union (singleton k) (domain xs);

let rec find (l: PList) (e: Int) : OptionInt =
      case l of
        Nil -> None
      | Cons kv xs -> case kv of
                        KeyValuePair k v -> if k == e then Some v
                                                      else find xs e;


let rec noDuplicates (l: PList): Bool =
     case l of
        Nil -> True
      | Cons kv xs -> case kv of
                        KeyValuePair k v -> find xs k == None && noDuplicates xs;

let rec updateElem (l: PList) (e: KeyValuePairAbs) : PList =
  case l of
    Nil -> Cons e Nil
  | Cons kv xs -> case kv of KeyValuePair k v ->
                                (case e of
                                   KeyValuePair ek ev -> if ek == k
                                                         then Cons (KeyValuePair ek ev) xs
                                                         else Cons (KeyValuePair k v) (updateElem xs e));

--let prop_updateElem (l: PList) (e: KeyValuePairAbs) : Bool =
--    case e of
--       KeyValuePair k v -> domain res == union (domain l) (singleton k);


let rec updatePList (l1: PList) (l2: PList) : PList =
     case l2 of
        Nil -> l1
      | Cons x xs -> updatePList (updateElem l1 x) xs ;

--let prop_updatePList (l1: PList) (l2: PList) : Bool =
--    domain (updatePList l1 l2) == union (domain l1) (domain l2);



let prop_readOverWrite (l: PList) (k1: Int) (k2: Int) (e: Int): Bool =
    find (updateElem l (KeyValuePair k2 e)) k1 == (if k1 == k2 then Some e
                                                               else find l k1);

--prop_updateElem
--prop_updatePList
prop_readOverWrite
