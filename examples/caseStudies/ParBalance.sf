
-- (*data definition*)

data PList = Nil | Cons Int PList ;
data Option = None | Some Int ;
let openPar : Int = 1 ;
let closePar : Int = 2 ;

data Pair = Pair Int Int;

let fst (p : Pair) : Int = case p of Pair p1 p2 -> p1;
let snd (p : Pair) : Int = case p of Pair p1 p2 -> p2;

let rec size (xs : PList) : Int =
   case xs of
       Nil -> 0
     | Cons y ys -> 1 + size ys ;

-- (* balanced *)
let rec balanced (l : PList) (counter : Int) : Bool =
     if counter < 0 then False
                    else case l of
                               Nil      -> counter == 0
                             | Cons h t -> let c = if h == openPar
                                                   then counter + 1
                                                   else if h == closePar
                                                        then counter - 1
                                                        else counter; balanced t counter ;

-- (* balanced_nonEarly *)
let rec balanced_nonEarly (l : PList) (counter : Int) : Bool =
       case l of
            Nil      -> counter == 0
          | Cons h t -> if counter < 0
                        then balanced_nonEarly t counter
                        else let c = if h == openPar
                                     then counter + 1
                                     else if h == closePar
                                          then counter - 1
                                          else counter ; balanced_nonEarly t c ;

let prop_balanced_nonEarly (l : PList) (co : Int) : Bool =
     balanced_nonEarly l co == balanced l co;




-- (* balanced_withFailure*)
let rec balanced_withFailure (l : PList) (counter : Int) (failed : Bool) : Bool =
      if counter >= 0 || failed
      then case l of
            Nil      -> (if failed then False else True) && counter == 0
          | Cons h t -> let c = if h == openPar
                                then counter + 1
                                else if h == closePar
                                     then counter - 1
                                     else counter ; balanced_withFailure t c (failed || (c < 0))
      else False; --error [Bool] "counter should be larger than 0 or failed";

let prop_balanced_withFailure (l : PList) (co : Int) (fal : Bool) : Bool =
     if fal then balanced_withFailure l co fal == balanced_nonEarly l (-1)
            else balanced_withFailure l co fal == balanced_nonEarly l co ;


-- (*reduce *)
let reduce (p1: Pair) (p2: Pair) : Pair =
     if fst p1 >= snd p2 then Pair (fst p1 - snd p2 + fst p2) (snd p1)
                       else Pair (fst p2) (snd p2 - fst p1 + snd p1);
-- (* parPair *)
let parPair (x: Int) : Pair =
     if x == openPar then Pair 1 0
                     else if x == closePar then Pair 0 1 else Pair 0 0;


--(* foldLeft*)
let rec foldLeft [A] (xs : PList) (v : A) (f : A -> Int -> A) : A =
    case xs of
         Nil -> v
       | Cons h t -> foldLeft [A] t (f v h) f;

-- (* balanced_withReduce*)
let rec balanced_withReduce (l : PList) (p : Pair) : Bool =
    if fst p >= 0 && snd p >= 0
    then case l of
           Nil      -> fst p == 0 && snd p == 0
         | Cons h t -> let p2 = reduce p (parPair h) ; balanced_withReduce t p2
    else False; --error [Bool] "the element of p should be larger than 0 respectively";


-- (* Property  balanced_foldLeft_equivalence*)
let rec prop_balanced_foldLeft_equivalence (l: PList) (p: Pair) : Bool =
     let p1 = fst p ; let p22 = snd p ;
     if (p1 >= 0) && (p22 >= 0)
     then let f = (\(s: Pair) (x: Int) -> reduce s (parPair x));
          ((foldLeft [Pair] l p f) == (Pair 0 0)) == balanced_withReduce l p &&
          (case l of
                Nil -> True
              | Cons h t -> let p2 = f p h ; prop_balanced_foldLeft_equivalence t p2)
     else True; --error [Bool] "the element of p should be larger than 0 respectively" ;


-- (* Property  reduce_associative *)
let prop_reduce_associative (p1: Pair) (p2: Pair) (p3: Pair) : Bool =
    reduce p1 (reduce p2 p3) == reduce (reduce p1 p2) p3 ;

--(* swap*)
let swap (p: Pair) : Pair = Pair (snd p) (fst p) ;

--(* Property  reduce_inverse*)
let prop_reduce_inverse (p1: Pair) (p2: Pair) : Bool =
    reduce p1 p2 == swap (reduce (swap p2) (swap p1)) ;

--(* Property reduce_associative_inverse*)
let prop_reduce_associative_inverse (p1: Pair) (p2: Pair) (p3: Pair) : Bool =
    reduce p1 (reduce p2 p3) == swap (reduce (reduce (swap p3) (swap p2)) (swap p1)) ;

--(* Property reduce_associative_inverse2*)
let prop_reduce_associative_inverse2 (p1: Pair) (p2: Pair) (p3: Pair) : Bool =
    reduce p1 (reduce p2 p3) == swap (reduce (swap p3) (reduce (swap p2) (swap p1))) ;


--(* headOption & lastOption*)
let headOption (l: PList) : Option =
    case l of
         Nil      -> None
       | Cons h t -> Some h ;

let rec lastOption (l: PList) : Option =
         case l of
              Cons h t -> (case t of
                             Nil      -> Some h
                           | Cons _ _ -> lastOption t)
            | Nil        -> None ;

-- (* init & ttail*)
let rec init (l: PList) : PList =
         case l of
              Cons h t -> (case t of
                              Nil      -> Nil
                            | Cons _ _ -> Cons h (init t) )
            | Nil        -> Nil ;

let ttail (l: PList) : PList =
     case l of
          Cons h t -> t
        | Nil      -> Nil ;

-- (* addLast *)
let rec addLast (l: PList) (x: Int) : PList =
        case l of
             Cons h t -> Cons h (addLast t x)
           | Nil      -> Cons x Nil ;

let prop_addLast (l: PList) (x: Int) : Bool =
    let res = addLast l x; lastOption res == Some x && init res == l ;


--(* reverse *)
let rec reverse (l: PList): PList =
         case l of
              Cons h t -> addLast (reverse t) h
            | Nil      -> Nil ;

let prop_reverse (l: PList): Bool =
     let res = reverse l; lastOption res == headOption l &&
                             lastOption l == headOption res ;

-- (*Property reverse_ttail_equivalence ... *)
let prop_reverse_ttail_equivalence (l: PList) : Bool =
    reverse (ttail l) == init (reverse l) ;

let rec prop_reverse_init_equivalence (l: PList) : Bool =
        reverse (init l) == ttail (reverse l) &&
        (case l of
              Cons h t -> prop_reverse_init_equivalence t
            | Nil      -> True );


let rec prop_reverse_equality_equivalence (l1: PList) (l2: PList) : Bool =
        (l1 == l2) == (reverse l1 == reverse l2) &&
        (case l1 of
             Cons h1 t1 -> (case l2 of
                                Cons h2 t2 -> prop_reverse_equality_equivalence t1 t2
                              | Nil        -> True )
           | Nil        -> True );


let rec prop_reverse_reverse_equivalence (l: PList) : Bool =
        reverse (reverse l) == l &&
        ( let lr = reverse l;
           case l of
             Cons h t -> (case lr of
                                Cons hr tr -> (prop_reverse_reverse_equivalence t &&
                                               prop_reverse_reverse_equivalence tr)
                              | Nil        -> True )
           | Nil        -> True ) ;



--prop_balanced_nonEarly
--prop_balanced_withFailure
--prop_balanced_foldLeft_equivalence
--prop_reduce_associative
--prop_reduce_inverse
--prop_reduce_associative_inverse
--prop_reduce_associative_inverse2
--prop_addLast
--prop_reverse
--prop_reverse_ttail_equivalence
--prop_reverse_init_equivalence
--prop_reverse_equality_equivalence
prop_reverse_reverse_equivalence
