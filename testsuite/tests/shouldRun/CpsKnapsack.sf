--> 13

data List [A] = Nil | Cons A (List [A]);

let head [A] (x:List[A]):A =
case x of
     Nil -> error [A] "head: empty list"
   | Cons x _ -> x;

let tail [A] (x:List[A]):List[A] =
case x of
     Nil -> error [List[A]] "tail: empty list"
   | Cons _ y -> y;

let null [A] (x:List[A]): Bool =
case x of
     Nil -> True
   | Cons _ _ -> False;

let rec length [A] (x:List[A]): Int =
case x of
     Nil -> 0
   | Cons _ _ -> 1 + length [A] (tail [A] x);


let max (x : Int) (y : Int) : Int =
  if x > y then x else y
;
let rec
  at[A] (n:Int) (x:List[A]): A =
    if (n==0)
    then head [A] x
    else at[A] (n-1) (tail [A] x)
;
let maxValue (values : List[Int]) (weights : List[Int]) (totalWeight : Int) : Int = (
  let rec maxValue' (k : Int -> Int) (i : Int) (w : Int) : Int =
    if i == 0 || w == 0 then (k 0)
    else
      if ( at (i-1) weights ) > w then maxValue' k (i - 1) w
      else
        maxValue' (\(result : Int) ->
                    (maxValue' (\(result' : Int) -> (k (max result ( ( at (i-1) values ) + result'))))
                               (i - 1)
                               (w - ( at (i-1) weights ))))
        (i - 1)
        w
  ;
  maxValue' (\(x : Int) -> x) (length [Int] values) totalWeight
)
;
maxValue L[9,3,4] L[2,5,8] 10
